----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/config/SecurityConfig.java -----
package com.zblog.zblogcommentcore.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Value("${aws.cognito.issuer-uri}")
    private String issuerUri;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authz -> authz
                        .requestMatchers("/api/public/**").permitAll()
                        .anyRequest().authenticated()
                )
                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));

        return http.build();
    }

    @Bean
    public JwtDecoder jwtDecoder() {
        String jwkSetUri = issuerUri + "/.well-known/jwks.json";
        return NimbusJwtDecoder.withJwkSetUri(jwkSetUri).build();
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/repository/CommentRepository.java -----
package com.zblog.zblogcommentcore.repository;

import com.zblog.zblogcommentcore.domain.entity.Comment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.UUID;

public interface CommentRepository extends JpaRepository<Comment, UUID> {

    // Retrieve top-level comments for a post
    Page<Comment> findByPostIdAndParentIdIsNullOrderByCreatedAtAsc(UUID postId, Pageable pageable);

    // Retrieve child comments for a given parent
    List<Comment> findByParentIdOrderByCreatedAtAsc(UUID parentId);

    // All comments for a post (if needed)
    Page<Comment> findByPostIdOrderByCreatedAtAsc(UUID postId, Pageable pageable);
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/controller/CommentController.java -----
package com.zblog.zblogcommentcore.controller;

import com.zblog.zblogcommentcore.dto.*;
import com.zblog.zblogcommentcore.service.CommentService;
import com.zblog.zblogcommentcore.util.SecurityUtil;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/api/comments")
@Validated
public class CommentController {

    private final CommentService commentService;

    @Autowired
    public CommentController(CommentService commentService) {
        this.commentService = commentService;
    }

    @PostMapping
    public CommentResponseDTO createComment(@Valid @RequestBody CommentCreateRequest request) {
        String currentUserId = SecurityUtil.getCurrentUserId();
        return commentService.createComment(request, currentUserId);
    }

    @PutMapping("/{commentId}")
    public CommentResponseDTO updateComment(@PathVariable("commentId") UUID commentId,
                                            @Valid @RequestBody CommentUpdateRequest request) {
        String currentUserId = SecurityUtil.getCurrentUserId();
        request.setId(commentId); // ensure ID matches
        return commentService.updateComment(request, currentUserId);
    }

    @DeleteMapping("/{commentId}")
    public void deleteComment(@PathVariable("commentId") UUID commentId) {
        String currentUserId = SecurityUtil.getCurrentUserId();
        commentService.deleteComment(commentId, currentUserId);
    }

    @GetMapping("/post/{postId}")
    public Page<CommentResponseDTO> getTopLevelComments(@PathVariable("postId") UUID postId, Pageable pageable) {
        return commentService.getTopLevelComments(postId, pageable);
    }

    @GetMapping("/{commentId}")
    public CommentResponseDTO getComment(@PathVariable("commentId") UUID commentId) {
        return commentService.getComment(commentId);
    }

    @PatchMapping("/{commentId}/react")
    public CommentResponseDTO reactToComment(@PathVariable("commentId") UUID commentId,
                                             @RequestParam("type") String reactionType) {
        return commentService.reactToComment(commentId, reactionType);
    }

    // optional route to get entire comment subtree
    @GetMapping("/{commentId}/thread")
    public CommentResponseDTO getCommentThread(@PathVariable("commentId") UUID commentId) {
        return commentService.buildCommentThread(commentId);
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/dto/CommentUpdateRequest.java -----
package com.zblog.zblogcommentcore.dto;

import jakarta.validation.constraints.NotBlank;
import java.util.UUID;

public class CommentUpdateRequest {

    private UUID id; // comment ID

    @NotBlank(message = "Content cannot be blank")
    private String content;

    // Getters/Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/dto/CommentCreateRequest.java -----
package com.zblog.zblogcommentcore.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

import java.util.UUID;

public class CommentCreateRequest {

    @NotNull(message = "Post ID cannot be null")
    private UUID postId;

    private UUID parentId;

    @NotBlank(message = "Content cannot be blank")
    private String content;

    // Getters/Setters
    public UUID getPostId() { return postId; }
    public void setPostId(UUID postId) { this.postId = postId; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/dto/CommentResponseDTO.java -----
package com.zblog.zblogcommentcore.dto;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

public class CommentResponseDTO {

    private UUID id;
    private UUID postId;
    private String authorId;
    private String content;
    private Instant createdAt;
    private Instant updatedAt;
    private UUID parentId;

    private long likeCount;
    private long laughCount;
    private long sadCount;
    private long insightfulCount;

    // Nested replies for convenience
    private List<CommentResponseDTO> replies;

    // Getters & Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public UUID getPostId() { return postId; }
    public void setPostId(UUID postId) { this.postId = postId; }

    public String getAuthorId() { return authorId; }
    public void setAuthorId(String authorId) { this.authorId = authorId; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }

    public Instant getCreatedAt() { return createdAt; }
    public void setCreatedAt(Instant createdAt) { this.createdAt = createdAt; }

    public Instant getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Instant updatedAt) { this.updatedAt = updatedAt; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public long getLikeCount() { return likeCount; }
    public void setLikeCount(long likeCount) { this.likeCount = likeCount; }

    public long getLaughCount() { return laughCount; }
    public void setLaughCount(long laughCount) { this.laughCount = laughCount; }

    public long getSadCount() { return sadCount; }
    public void setSadCount(long sadCount) { this.sadCount = sadCount; }

    public long getInsightfulCount() { return insightfulCount; }
    public void setInsightfulCount(long insightfulCount) { this.insightfulCount = insightfulCount; }

    public List<CommentResponseDTO> getReplies() { return replies; }
    public void setReplies(List<CommentResponseDTO> replies) { this.replies = replies; }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/util/SecurityUtil.java -----
package com.zblog.zblogcommentcore.util;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

public class SecurityUtil {

    public static String getCurrentUserId() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || auth.getName() == null) {
            throw new SecurityException("No authenticated user");
        }
        // typically the sub claim from Cognito
        return auth.getName();
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/service/impl/CommentServiceImpl.java -----
package com.zblog.zblogcommentcore.service.impl;

import com.zblog.zblogcommentcore.domain.entity.Comment;
import com.zblog.zblogcommentcore.dto.*;
import com.zblog.zblogcommentcore.exception.CommentNotFoundException;
import com.zblog.zblogcommentcore.repository.CommentRepository;
import com.zblog.zblogcommentcore.service.CommentService;
import com.zblog.zblogpostcore.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class CommentServiceImpl implements CommentService {

    private final CommentRepository commentRepository;
    private final PostService postService;

    @Autowired
    public CommentServiceImpl(CommentRepository commentRepository, PostService postService) {
        this.commentRepository = commentRepository;
        this.postService = postService;
    }

    @Override
    public CommentResponseDTO createComment(CommentCreateRequest request, String currentUserId) {
        // Validate post existence via post-core, e.g.:
        postService.validatePostExists(request.getPostId());

        Comment comment = new Comment();
        comment.setPostId(request.getPostId());
        comment.setAuthorId(currentUserId);
        comment.setContent(request.getContent());
        comment.setParentId(request.getParentId());

        commentRepository.save(comment);
        return toDTO(comment, true);
    }

    @Override
    public CommentResponseDTO updateComment(CommentUpdateRequest request, String currentUserId) {
        Comment existing = commentRepository.findById(request.getId())
                .orElseThrow(() -> new CommentNotFoundException("Comment not found"));

        if (!existing.getAuthorId().equals(currentUserId)) {
            throw new SecurityException("Not authorized to update this comment");
        }
        existing.setContent(request.getContent());
        commentRepository.save(existing);

        return toDTO(existing, true);
    }

    @Override
    public void deleteComment(UUID commentId, String currentUserId) {
        Comment existing = commentRepository.findById(commentId)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found"));

        if (!existing.getAuthorId().equals(currentUserId)) {
            throw new SecurityException("Not authorized to delete this comment");
        }
        // Hard delete
        // optional recursion if you want to delete children as well
        commentRepository.delete(existing);
    }

    @Override
    public Page<CommentResponseDTO> getTopLevelComments(UUID postId, Pageable pageable) {
        Page<Comment> page = commentRepository.findByPostIdAndParentIdIsNullOrderByCreatedAtAsc(postId, pageable);
        return page.map(comment -> toDTO(comment, false));
    }

    @Override
    public CommentResponseDTO getComment(UUID commentId) {
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found"));
        return toDTO(comment, true);
    }

    @Override
    public CommentResponseDTO reactToComment(UUID commentId, String reactionType) {
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found"));

        switch (reactionType.toLowerCase()) {
            case "like":
                comment.setLikeCount(comment.getLikeCount() + 1);
                break;
            case "laugh":
                comment.setLaughCount(comment.getLaughCount() + 1);
                break;
            case "sad":
                comment.setSadCount(comment.getSadCount() + 1);
                break;
            case "insightful":
                comment.setInsightfulCount(comment.getInsightfulCount() + 1);
                break;
            default:
                throw new IllegalArgumentException("Unknown reaction type: " + reactionType);
        }
        commentRepository.save(comment);
        return toDTO(comment, true);
    }

    @Override
    public CommentResponseDTO buildCommentThread(UUID commentId) {
        Comment root = commentRepository.findById(commentId)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found"));
        return toDTO(root, true);
    }

    // ---------- Helpers ----------

    private CommentResponseDTO toDTO(Comment comment, boolean buildReplies) {
        CommentResponseDTO dto = new CommentResponseDTO();
        dto.setId(comment.getId());
        dto.setPostId(comment.getPostId());
        dto.setAuthorId(comment.getAuthorId());
        dto.setContent(comment.getContent());
        dto.setCreatedAt(comment.getCreatedAt());
        dto.setUpdatedAt(comment.getUpdatedAt());
        dto.setParentId(comment.getParentId());
        dto.setLikeCount(comment.getLikeCount());
        dto.setLaughCount(comment.getLaughCount());
        dto.setSadCount(comment.getSadCount());
        dto.setInsightfulCount(comment.getInsightfulCount());

        if (buildReplies) {
            // gather replies
            List<Comment> children = commentRepository.findByParentIdOrderByCreatedAtAsc(comment.getId());
            List<CommentResponseDTO> childDTOs = children.stream()
                    .map(child -> toDTO(child, true))
                    .collect(Collectors.toList());
            dto.setReplies(childDTOs);
        }
        return dto;
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/service/CommentService.java -----
package com.zblog.zblogcommentcore.service;

import com.zblog.zblogcommentcore.dto.CommentCreateRequest;
import com.zblog.zblogcommentcore.dto.CommentUpdateRequest;
import com.zblog.zblogcommentcore.dto.CommentResponseDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.UUID;

public interface CommentService {

    CommentResponseDTO createComment(CommentCreateRequest request, String currentUserId);

    CommentResponseDTO updateComment(CommentUpdateRequest request, String currentUserId);

    void deleteComment(UUID commentId, String currentUserId);

    Page<CommentResponseDTO> getTopLevelComments(UUID postId, Pageable pageable);

    CommentResponseDTO getComment(UUID commentId);

    CommentResponseDTO reactToComment(UUID commentId, String reactionType);

    // Get nested replies by parent
    CommentResponseDTO buildCommentThread(UUID commentId);
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/domain/entity/Comment.java -----
package com.zblog.zblogcommentcore.domain.entity;

import jakarta.persistence.*;
import java.time.Instant;
import java.util.UUID;

@Entity
@Table(name = "comments")
public class Comment {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    private UUID postId;      // link to post-core
    private String authorId;  // from Cognito sub
    private String content;

    private Instant createdAt;
    private Instant updatedAt;

    private UUID parentId;    // if null => top-level comment; if not => nested

    // Reactions stored as counters: likeCount, laughCount, etc.
    private long likeCount;
    private long laughCount;
    private long sadCount;
    private long insightfulCount;

    @PrePersist
    protected void onCreate() {
        createdAt = Instant.now();
        updatedAt = createdAt;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = Instant.now();
    }

    // Getters/Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public UUID getPostId() { return postId; }
    public void setPostId(UUID postId) { this.postId = postId; }

    public String getAuthorId() { return authorId; }
    public void setAuthorId(String authorId) { this.authorId = authorId; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }

    public Instant getCreatedAt() { return createdAt; }
    public void setCreatedAt(Instant createdAt) { this.createdAt = createdAt; }

    public Instant getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Instant updatedAt) { this.updatedAt = updatedAt; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public long getLikeCount() { return likeCount; }
    public void setLikeCount(long likeCount) { this.likeCount = likeCount; }

    public long getLaughCount() { return laughCount; }
    public void setLaughCount(long laughCount) { this.laughCount = laughCount; }

    public long getSadCount() { return sadCount; }
    public void setSadCount(long sadCount) { this.sadCount = sadCount; }

    public long getInsightfulCount() { return insightfulCount; }
    public void setInsightfulCount(long insightfulCount) { this.insightfulCount = insightfulCount; }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/graphql/CommentGraphQLController.java -----
package com.zblog.zblogcommentcore.graphql;

import com.zblog.zblogcommentcore.dto.CommentCreateRequest;
import com.zblog.zblogcommentcore.dto.CommentResponseDTO;
import com.zblog.zblogcommentcore.dto.CommentUpdateRequest;
import com.zblog.zblogcommentcore.service.CommentService;
import com.zblog.zblogcommentcore.util.SecurityUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.MutationMapping;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.UUID;

@Controller
public class CommentGraphQLController {

    private final CommentService commentService;

    @Autowired
    public CommentGraphQLController(CommentService commentService) {
        this.commentService = commentService;
    }

    @QueryMapping
    public Iterable<CommentResponseDTO> commentsForPost(@Argument UUID postId,
                                                        @Argument Integer page,
                                                        @Argument Integer size) {
        int p = (page == null) ? 0 : page;
        int s = (size == null) ? 10 : size;
        return commentService.getTopLevelComments(postId, PageRequest.of(p, s));
    }

    @QueryMapping
    public CommentResponseDTO comment(@Argument UUID id) {
        return commentService.buildCommentThread(id);
    }

    @MutationMapping
    public CommentResponseDTO createComment(@Argument CommentCreateRequest input) {
        String userId = SecurityUtil.getCurrentUserId();
        return commentService.createComment(input, userId);
    }

    @MutationMapping
    public CommentResponseDTO updateComment(@Argument UUID id,
                                            @Argument String content) {
        String userId = SecurityUtil.getCurrentUserId();
        CommentUpdateRequest req = new CommentUpdateRequest();
        req.setId(id);
        req.setContent(content);
        return commentService.updateComment(req, userId);
    }

    @MutationMapping
    public Boolean deleteComment(@Argument UUID id) {
        String userId = SecurityUtil.getCurrentUserId();
        commentService.deleteComment(id, userId);
        return true;
    }

    @MutationMapping
    public CommentResponseDTO reactToComment(@Argument UUID id,
                                             @Argument String reactionType) {
        return commentService.reactToComment(id, reactionType);
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/exception/CommentNotFoundException.java -----
package com.zblog.zblogcommentcore.exception;

public class CommentNotFoundException extends RuntimeException {
    public CommentNotFoundException(String message) {
        super(message);
    }
}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/java/com/zblog/zblogcommentcore/ZblogCommentCoreApplication.java -----
package com.zblog.zblogcommentcore;

import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan(basePackages = {
        "com.zblog.zblogcommentcore",
        "com.zblog.zblogpostcore"
})
public class ZblogCommentCoreApplication {

    public static void main(String[] args) {
        // Load .env if using dotenv
        Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();
        dotenv.entries().forEach(entry ->
                System.setProperty(entry.getKey(), entry.getValue())
        );

        SpringApplication.run(ZblogCommentCoreApplication.class, args);
    }

}


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/resources/application.properties -----
spring.application.name=zblog-comment-core


----- /home/zakaria/zBlog/zblog-backend/zblog-comment-core/src/main/resources/graphql/schema.graphqls -----
type Query {
    # Retrieve top-level comments for a post
    commentsForPost(postId: ID!, page: Int, size: Int): [CommentDTO!]!

    # Get single comment (with nested replies)
    comment(id: ID!): CommentDTO
}

type Mutation {
    createComment(input: CommentCreateInput!): CommentDTO
    updateComment(id: ID!, content: String!): CommentDTO
    deleteComment(id: ID!): Boolean

    reactToComment(id: ID!, reactionType: String!): CommentDTO
}

type CommentDTO {
    id: ID!
    postId: ID!
    authorId: String
    content: String
    createdAt: String
    updatedAt: String
    parentId: ID
    likeCount: Int
    laughCount: Int
    sadCount: Int
    insightfulCount: Int
    replies: [CommentDTO!]
}

input CommentCreateInput {
    postId: ID!
    parentId: ID
    content: String!
}


